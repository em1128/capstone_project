#include <iostream>
#include <vector>
#include <cmath>

struct Point3D {
    double x, y, z;
};

// 함수: 두 3D 포인트 간의 유클리디안 거리 계산
double calculateDistance(const Point3D& point1, const Point3D& point2) {
    double dx = point1.x - point2.x;
    double dy = point1.y - point2.y;
    double dz = point1.z - point2.z;
    return std::sqrt(dx * dx + dy * dy + dz * dz);
}

int main() {
    std::vector<Point3D> jointCoordinates = {
        {-612.15314, -40.432884, 2061.9185},
        {-625.20099, -217.76511, 2071.9895},
        {-636.67609, -359.37759, 2081.2722},
        {-640.55334, -576.04822, 2084.4836},
        {-618.30103, -540.54956, 2109.7585},
        {-515.98584, -528.3938, 2208.4929},
        {-329.41272, -330.90567, 2256.3428},
        {-161.0071, -172.01138, 2257.0054},
        {-86.97834, -110.69435, 2256.5732},
        {-663.01434, -539.89661, 2059.6245},
        {-732.2088, -535.80768, 1948.1322},
        {-762.12134, -334.73624, 1754.0112},
        {-748.26147, -171.03423, 1586.7281},
        {-783.72839, -112.53777, 1509.0577},
        {-542.84912, -42.182251, 2120.9038},
        {-553.22681, 354.49158, 2168.3953},
        {-602.40717, 726.32935, 2240.4473},
        {-486.5332, 845.79205, 2155.146},
        {-674.64758, -38.855404, 2008.729},
        {-672.26117, 359.47534, 2035.1229},
        {-687.16113, 739.08661, 2103.1819},
        {-623.53998, 852.64838, 1990.6572},
        {-632.00739, -656.77655, 2076.7666},
        {-517.78656, -666.86761, 1964.5911}
    };

    std::vector<std::pair<int, int>> jointPairs = {
        {0, 1}, {1, 2}, {2, 4}, {4, 5}, {5, 6},
        {6, 7}, {7, 8}, {2, 3}, {3, 26}, {26, 27},
        {2, 11}, {11, 12}, {12, 13}, {13, 14},
        {14, 15}, {0, 18}, {18, 19}, {19, 20},
        {20, 21}, {0, 22}, {22, 23}, {23, 24},
        {24, 25}
    };

    for (const auto& pair : jointPairs) {
        int joint1 = pair.first;
        int joint2 = pair.second;

        double distance = calculateDistance(jointCoordinates[joint1], jointCoordinates[joint2]);

        std::cout << "Distance between joint " << joint1 << " and joint " << joint2 << " is: " << distance << std::endl;
    }

    return 0;
}
